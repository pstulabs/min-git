## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import json  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json –∏ –æ–±—Ä–∞—Ç–Ω–æ
import requests  # http-–∑–∞–ø—Ä–æ—Å—ã
import configparser  # –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥–∞
from datetime import datetime, timedelta  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
import api_weather as w
import pytz as tz  # –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤


# –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def read_user_data(file):
	r_data = open(file, 'r', encoding='utf-8')
	user_data = r_data.readlines()[0]
	r_data.close()
	file_data = json.loads(user_data)
	return file_data


# –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –≤ —Ñ–∞–π–ª
def write_user_data(file, data):
	f_data = open(file, 'w', encoding='utf-8')
	u_data = json.dumps(data)
	f_data.writelines(u_data)
	f_data.close()
	return


# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
config = configparser.ConfigParser()
config.read('properties', encoding='utf-8')
TG_API = config['Telegram']['URL']


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–ª–µ–≥–∏, –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ "message", "callback_query"
def getUpdates():
	req = requests.get(f'{TG_API}getUpdates',
					   params={'offset': -1, 'allowed_updates': ["message", "callback_query"]}, timeout=5)
	req = req.json()
	if req['result'] != []:
		req = req['result'][0]
		# –º–µ—Ç–∏–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
		requests.get(f'{TG_API}getUpdates', params={'offset': req['update_id'] + 1}, timeout=5)
		if req.get('message', {}).get('text', {}) != {}:
			resp = {'data': req.get('message', {}).get('text', {}),
					'user_id': req.get('message', {}).get('from', {}).get('id')}
			# —Ç—É—Ç –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ setTimeRecieve (–ª—É—á—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª)
			if req.get('message', {}).get('reply_to_message', {}).get('text', 'empty').find('\u23f0') != -1:
				resp['set_time_msg'] = True
			# —Ç—É—Ç –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ setLocality
			elif req.get('message', {}).get('reply_to_message', {}).get('text', 'empty').find('üèò') != -1:
				resp['set_location'] = True
		elif req.get('callback_query', {}) != {}:
			resp = {'id': req.get('callback_query', {}).get('id'), 'data': req.get('callback_query', {}).get('data'),
					'user_id': req.get('callback_query', {}).get('from', {}).get('id'), 'is_callback': True}
	else:
		resp = None
	return resp


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–∞
def sendMessage(user_id, text=None, body=None):
	if body is None:
		body = {
			"chat_id": user_id,
			"text": text}
	req = requests.post(f'{TG_API}sendMessage', json=body, timeout=5)
	return req.status_code


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞
def setLocality(initial, user_id, city='–ü–µ—Ä–º—å'):
	if initial is True:  # –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞
		# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞
		body = {
			"chat_id": user_id,
			"text": "üèò –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞",
			"reply_markup": {"force_reply": True, "input_field_placeholder": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"}}
		sendMessage(user_id=user_id, text=None, body=body)
		result = 'OK'
	else:  # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏—à–ª–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞
		geo = w.getLocality(city)  # –∏–¥—ë–º –≤ —Å–µ—Ä–≤–∏—Å –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
		if geo is not None:
			user_data = read_user_data('user_data.json')
			if user_data.get(str(user_id), None) is None:
				user_data[str(user_id)] = {}
			user_data[str(user_id)]['location'] = geo['location']
			user_data[str(user_id)]['timezone'] = geo['timezone']
			user_data[str(user_id)]['last_send'] = (datetime.now(tz.timezone(geo['timezone'])) - timedelta(1)).strftime(
				'%Y-%m-%d')
			user_data[str(user_id)]['is_active'] = 1
			user_data[str(user_id)]['place'] = city
			if user_data[str(user_id)].get('time_res', None) is None:
				user_data[str(user_id)]['time_res'] = '21:00'
				result = f'–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç {city} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 21:00. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.'
			else:
				result = f'–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç {city} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
			write_user_data('user_data.json', user_data)
		else:
			result = 'üèò –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.'
	return result


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
def setTimeRecieve(user_id, initial, time_res='21:00'):
	if initial is True:
		# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
		body = {
			"chat_id": user_id,
			"text": "\u23f0 –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã",
			"reply_markup": {"force_reply": True, "input_field_placeholder": "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"}}
		sendMessage(user_id=user_id, text=None, body=body)
		result = 'OK'
	else:
		try:
			datetime.strptime(time_res, '%H:%M').time()
		except ValueError:
			result = '\u23f0 –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00'
			return result
		user_data = read_user_data('user_data.json')
		if user_data.get(str(user_id), None) is None:
			user_data[str(user_id)] = {}
		user_data[str(user_id)]['time_res'] = time_res
		write_user_data('user_data.json', user_data)
		if user_data.get(str(user_id), {}).get('location', None) is not None:
			result = f'–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_res}'
		else:
			result = f'–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_res}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç'
	return result


# –≤–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É
def setActivity(user_id, is_active):
	user_data = read_user_data('user_data.json')
	if user_data.get(str(user_id), None) is None:
		user_data[str(user_id)] = {}
	user_data[str(user_id)]['is_active'] = is_active
	write_user_data('user_data.json', user_data)
	if is_active == 0:
		result = '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞'
	else:
		result = '–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
	return result
